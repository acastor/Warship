// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var React = require("react");
var Js_math = require("bs-platform/lib/js/js_math.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var SharedTypes$ReactHooksTemplate = require("../SharedTypes.bs.js");

function buildFleet(param) {
  var carrier = /* record */[
    /* damage */0,
    /* shipType : Carrier */0,
    /* isSunk */false,
    /* shipLength */5,
    /* coordinates */Caml_array.caml_make_vect(5, /* tuple */[
          -1,
          -1
        ])
  ];
  var battleship = /* record */[
    /* damage */0,
    /* shipType : Battleship */1,
    /* isSunk */false,
    /* shipLength */4,
    /* coordinates */Caml_array.caml_make_vect(4, /* tuple */[
          -1,
          -1
        ])
  ];
  var submarine = /* record */[
    /* damage */0,
    /* shipType : Submarine */3,
    /* isSunk */false,
    /* shipLength */3,
    /* coordinates */Caml_array.caml_make_vect(3, /* tuple */[
          -1,
          -1
        ])
  ];
  var destroyer = /* record */[
    /* damage */0,
    /* shipType : Destroyer */2,
    /* isSunk */false,
    /* shipLength */3,
    /* coordinates */Caml_array.caml_make_vect(3, /* tuple */[
          -1,
          -1
        ])
  ];
  var patrolBoat = /* record */[
    /* damage */0,
    /* shipType : PatrolBoat */4,
    /* isSunk */false,
    /* shipLength */2,
    /* coordinates */Caml_array.caml_make_vect(2, /* tuple */[
          -1,
          -1
        ])
  ];
  return /* :: */[
          carrier,
          /* :: */[
            battleship,
            /* :: */[
              submarine,
              /* :: */[
                destroyer,
                /* :: */[
                  patrolBoat,
                  /* [] */0
                ]
              ]
            ]
          ]
        ];
}

function isLegalPlacement(board, x, y, direction, shipLength) {
  var validPlacement = /* record */[/* contents */false];
  if (direction === 0) {
    validPlacement[0] = (x + shipLength | 0) <= SharedTypes$ReactHooksTemplate.boardSize;
  } else {
    validPlacement[0] = (y + shipLength | 0) <= SharedTypes$ReactHooksTemplate.boardSize;
  }
  if (validPlacement[0]) {
    for(var index = 0 ,index_finish = shipLength - 1 | 0; index <= index_finish; ++index){
      if (validPlacement[0]) {
        if (direction === 0) {
          validPlacement[0] = Caml_array.caml_array_get(Caml_array.caml_array_get(board, x + index | 0), y) !== /* Ship */1;
        } else {
          validPlacement[0] = Caml_array.caml_array_get(Caml_array.caml_array_get(board, x), y + index | 0) !== /* Ship */1;
        }
      }
      
    }
  }
  return validPlacement;
}

function randomlyPlaceShips(board, fleet) {
  return List.map((function (ship) {
                var randomX = Js_math.floor(SharedTypes$ReactHooksTemplate.boardSize * Math.random());
                var randomY = Js_math.floor(SharedTypes$ReactHooksTemplate.boardSize * Math.random());
                var randomDirection = Js_math.floor(2 * Math.random());
                while(!isLegalPlacement(board, randomX, randomY, randomDirection, ship[/* shipLength */3])[0]) {
                  randomX = Js_math.floor(SharedTypes$ReactHooksTemplate.boardSize * Math.random());
                  randomY = Js_math.floor(SharedTypes$ReactHooksTemplate.boardSize * Math.random());
                  randomDirection = Js_math.floor(2 * Math.random());
                };
                var x = randomX;
                var y = randomY;
                var direction = randomDirection;
                for(var index = 0 ,index_finish = ship[/* shipLength */3] - 1 | 0; index <= index_finish; ++index){
                  if (direction === 0) {
                    Caml_array.caml_array_set(Caml_array.caml_array_get(board, x + index | 0), y, /* Ship */1);
                    Caml_array.caml_array_set(ship[/* coordinates */4], index, /* tuple */[
                          x + index | 0,
                          y
                        ]);
                  } else {
                    Caml_array.caml_array_set(Caml_array.caml_array_get(board, x), y + index | 0, /* Ship */1);
                    Caml_array.caml_array_set(ship[/* coordinates */4], index, /* tuple */[
                          x,
                          y + index | 0
                        ]);
                  }
                }
                return /* () */0;
              }), fleet);
}

function initialState(param) {
  var humanFleet = buildFleet(/* () */0);
  var aiFleet = buildFleet(/* () */0);
  var humanBoard = $$Array.make_matrix(SharedTypes$ReactHooksTemplate.boardSize, SharedTypes$ReactHooksTemplate.boardSize, /* Empty */0);
  var aiBoard = $$Array.make_matrix(SharedTypes$ReactHooksTemplate.boardSize, SharedTypes$ReactHooksTemplate.boardSize, /* Empty */0);
  randomlyPlaceShips(humanBoard, humanFleet);
  randomlyPlaceShips(aiBoard, aiFleet);
  return /* record */[
          /* humanBoard */humanBoard,
          /* humanFleet */humanFleet,
          /* aiBoard */aiBoard,
          /* aiFleet */aiFleet,
          /* turnState : Playing */Block.__(0, [/* Human */0])
        ];
}

var boardContext = React.createContext(initialState(/* () */0));

function makeProps(value, children, param) {
  return {
          value: value,
          children: children
        };
}

var make = boardContext.Provider;

var BoardProvider = /* module */[
  /* makeProps */makeProps,
  /* make */make
];

var directionVertical = 0;

var directionHorizontal = 1;

exports.buildFleet = buildFleet;
exports.directionVertical = directionVertical;
exports.directionHorizontal = directionHorizontal;
exports.isLegalPlacement = isLegalPlacement;
exports.randomlyPlaceShips = randomlyPlaceShips;
exports.initialState = initialState;
exports.boardContext = boardContext;
exports.BoardProvider = BoardProvider;
/* boardContext Not a pure module */
