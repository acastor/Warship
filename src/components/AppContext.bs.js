// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var React = require("react");
var Js_math = require("bs-platform/lib/js/js_math.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Util$ReactHooksTemplate = require("../Util.bs.js");
var SharedTypes$ReactHooksTemplate = require("../SharedTypes.bs.js");

function createShip(shipLength, coordinates, shipType) {
  return /* record */[
          /* damage */0,
          /* shipType */shipType,
          /* isSunk */false,
          /* shipLength */shipLength,
          /* coordinates */coordinates
        ];
}

var shipsAndLengths = /* :: */[
  /* tuple */[
    /* Carrier */0,
    5
  ],
  /* :: */[
    /* tuple */[
      /* Battleship */1,
      4
    ],
    /* :: */[
      /* tuple */[
        /* Submarine */3,
        3
      ],
      /* :: */[
        /* tuple */[
          /* Destroyer */2,
          3
        ],
        /* :: */[
          /* tuple */[
            /* PatrolBoat */4,
            2
          ],
          /* [] */0
        ]
      ]
    ]
  ]
];

function updateBoardWithShipCoordinates(board, ship) {
  $$Array.map((function (param) {
          return Caml_array.caml_array_set(Caml_array.caml_array_get(board, param[0]), param[1], /* Ship */1);
        }), ship[/* coordinates */4]);
  return /* () */0;
}

function randomlyPlaceShips(board) {
  return List.map((function (param) {
                var shipLength = param[1];
                var randomX = Js_math.floor(SharedTypes$ReactHooksTemplate.boardSize * Math.random());
                var randomY = Js_math.floor(SharedTypes$ReactHooksTemplate.boardSize * Math.random());
                var randomDirection = Js_math.floor(2 * Math.random());
                while(!Util$ReactHooksTemplate.isLegalPlacement(board, randomX, randomY, randomDirection, shipLength)) {
                  randomX = Js_math.floor(SharedTypes$ReactHooksTemplate.boardSize * Math.random());
                  randomY = Js_math.floor(SharedTypes$ReactHooksTemplate.boardSize * Math.random());
                  randomDirection = Js_math.floor(2 * Math.random());
                };
                var x = randomX;
                var y = randomY;
                var direction = randomDirection;
                var shipCoordinates = Util$ReactHooksTemplate.getCoordinatesForShip(shipLength, x, y, direction);
                var ship = createShip(shipLength, shipCoordinates, param[0]);
                updateBoardWithShipCoordinates(board, ship);
                return ship;
              }), shipsAndLengths);
}

function initialState(param) {
  var humanBoard = $$Array.make_matrix(SharedTypes$ReactHooksTemplate.boardSize, SharedTypes$ReactHooksTemplate.boardSize, /* Empty */0);
  var aiBoard = $$Array.make_matrix(SharedTypes$ReactHooksTemplate.boardSize, SharedTypes$ReactHooksTemplate.boardSize, /* Empty */0);
  var humanFleet = randomlyPlaceShips(humanBoard);
  var aiFleet = randomlyPlaceShips(aiBoard);
  return /* record */[
          /* humanBoard */humanBoard,
          /* humanFleet */humanFleet,
          /* aiBoard */aiBoard,
          /* aiFleet */aiFleet,
          /* turnState : Playing */Block.__(0, [/* Human */0])
        ];
}

var boardContext = React.createContext(initialState(/* () */0));

function makeProps(value, children, param) {
  return {
          value: value,
          children: children
        };
}

var make = boardContext.Provider;

var BoardProvider = /* module */[
  /* makeProps */makeProps,
  /* make */make
];

exports.createShip = createShip;
exports.shipsAndLengths = shipsAndLengths;
exports.updateBoardWithShipCoordinates = updateBoardWithShipCoordinates;
exports.randomlyPlaceShips = randomlyPlaceShips;
exports.initialState = initialState;
exports.boardContext = boardContext;
exports.BoardProvider = BoardProvider;
/* boardContext Not a pure module */
