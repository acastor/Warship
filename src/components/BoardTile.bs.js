// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var AppContext$ReactHooksTemplate = require("./AppContext.bs.js");

function getTileContents(tile, boardOwner) {
  switch (tile) {
    case 0 : 
        return "";
    case 1 : 
        if (boardOwner) {
          return "";
        } else {
          return " ðŸš¢ ";
        }
    case 2 : 
        return " ðŸ’¨ ";
    case 3 : 
        return " ðŸ”¥ ";
    case 4 : 
        return " â˜  ";
    
  }
}

function BoardTile(Props) {
  var x = Props.x;
  var y = Props.y;
  var boardOwner = Props.boardOwner;
  var onTileClick = Props.onTileClick;
  var gameState = React.useContext(AppContext$ReactHooksTemplate.boardContext);
  var click = function (param) {
    return Curry._4(onTileClick, gameState, Caml_format.caml_int_of_string(x), Caml_format.caml_int_of_string(y), boardOwner);
  };
  var board = boardOwner ? gameState[/* aiBoard */2] : gameState[/* humanBoard */0];
  return React.createElement("div", {
              className: "board-tile",
              onClick: click,
              x: x,
              y: y
            }, React.createElement("div", {
                  className: "tile-emoji"
                }, getTileContents(Caml_array.caml_array_get(Caml_array.caml_array_get(board, Caml_format.caml_int_of_string(x)), Caml_format.caml_int_of_string(y)), boardOwner)));
}

var make = BoardTile;

exports.getTileContents = getTileContents;
exports.make = make;
/* react Not a pure module */
