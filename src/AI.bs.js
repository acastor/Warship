// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Util$ReactHooksTemplate = require("./Util.bs.js");
var SharedTypes$ReactHooksTemplate = require("./SharedTypes.bs.js");

function getRandom(min, max) {
  return Math.random() * (max - min | 0) + min;
}

var aiVirtualBoard = $$Array.make_matrix(SharedTypes$ReactHooksTemplate.boardSize, SharedTypes$ReactHooksTemplate.boardSize, /* Empty */0);

var startingMovesArr_000 = /* record */[
  /* x */7,
  /* y */3,
  /* weight */getRandom(10, 20)
];

var startingMovesArr_001 = /* :: */[
  /* record */[
    /* x */6,
    /* y */2,
    /* weight */getRandom(10, 20)
  ],
  /* :: */[
    /* record */[
      /* x */3,
      /* y */7,
      /* weight */getRandom(10, 20)
    ],
    /* :: */[
      /* record */[
        /* x */2,
        /* y */6,
        /* weight */getRandom(10, 20)
      ],
      /* :: */[
        /* record */[
          /* x */6,
          /* y */6,
          /* weight */getRandom(10, 20)
        ],
        /* :: */[
          /* record */[
            /* x */3,
            /* y */3,
            /* weight */getRandom(10, 20)
          ],
          /* :: */[
            /* record */[
              /* x */5,
              /* y */5,
              /* weight */getRandom(10, 20)
            ],
            /* :: */[
              /* record */[
                /* x */4,
                /* y */4,
                /* weight */getRandom(10, 20)
              ],
              /* :: */[
                /* record */[
                  /* x */0,
                  /* y */8,
                  /* weight */getRandom(15, 25)
                ],
                /* :: */[
                  /* record */[
                    /* x */1,
                    /* y */9,
                    /* weight */getRandom(20, 30)
                  ],
                  /* :: */[
                    /* record */[
                      /* x */8,
                      /* y */0,
                      /* weight */getRandom(15, 25)
                    ],
                    /* :: */[
                      /* record */[
                        /* x */9,
                        /* y */1,
                        /* weight */getRandom(20, 30)
                      ],
                      /* :: */[
                        /* record */[
                          /* x */9,
                          /* y */9,
                          /* weight */getRandom(20, 30)
                        ],
                        /* :: */[
                          /* record */[
                            /* x */0,
                            /* y */0,
                            /* weight */getRandom(20, 30)
                          ],
                          /* [] */0
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ]
  ]
];

var startingMovesArr = /* :: */[
  startingMovesArr_000,
  startingMovesArr_001
];

function getNumberOfHitCells(shipCoordinates, board) {
  return List.length(List.filter((function (param) {
                      return Caml_array.caml_array_get(Caml_array.caml_array_get(board, param[0]), param[1]) === /* Hit */3;
                    }))($$Array.to_list(shipCoordinates)));
}

function updateAIVirtualBoard(humanBoard, x, y) {
  var match = Caml_array.caml_array_get(Caml_array.caml_array_get(humanBoard, x), y);
  if (match !== 1) {
    if (match !== 0) {
      return /* () */0;
    } else {
      return Caml_array.caml_array_set(Caml_array.caml_array_get(aiVirtualBoard, x), y, /* Miss */2);
    }
  } else {
    return Caml_array.caml_array_set(Caml_array.caml_array_get(aiVirtualBoard, x), y, /* Hit */3);
  }
}

function getProbabilityGrid(humanFleet, humanBoard) {
  var probabilityGrid = $$Array.make_matrix(SharedTypes$ReactHooksTemplate.boardSize, SharedTypes$ReactHooksTemplate.boardSize, 0);
  var shipsToHit = List.filter((function (ship) {
            return !ship[/* isSunk */2];
          }))(humanFleet);
  var checkCoordinateInDirection = function (humanBoard, x, y, direction, ship, probabilityGrid) {
    if (Util$ReactHooksTemplate.isLegalPlacement(aiVirtualBoard, x, y, direction, ship[/* shipLength */3])) {
      var shipCoordinates = Util$ReactHooksTemplate.getCoordinatesForShip(ship, x, y, direction);
      var tileWeight = /* record */[/* contents */1];
      var numberOfHitCells = getNumberOfHitCells(shipCoordinates, humanBoard);
      if (numberOfHitCells > 0) {
        tileWeight[0] = Caml_int32.imul(1000, numberOfHitCells);
      }
      $$Array.map((function (param) {
              var y = param[1];
              var x = param[0];
              return Caml_array.caml_array_set(Caml_array.caml_array_get(probabilityGrid, x), y, Caml_array.caml_array_get(Caml_array.caml_array_get(probabilityGrid, x), y) + tileWeight[0] | 0);
            }), shipCoordinates);
      return /* () */0;
    } else {
      return 0;
    }
  };
  List.map((function (ship) {
          return $$Array.mapi((function (y, columnArr) {
                        return $$Array.mapi((function (x, param) {
                                      checkCoordinateInDirection(humanBoard, x, y, SharedTypes$ReactHooksTemplate.directionHorizontal, ship, probabilityGrid);
                                      checkCoordinateInDirection(humanBoard, x, y, SharedTypes$ReactHooksTemplate.directionVertical, ship, probabilityGrid);
                                      if (Caml_array.caml_array_get(Caml_array.caml_array_get(aiVirtualBoard, x), y) !== /* Empty */0) {
                                        return Caml_array.caml_array_set(Caml_array.caml_array_get(probabilityGrid, x), y, 0);
                                      } else {
                                        return 0;
                                      }
                                    }), columnArr);
                      }), humanBoard);
        }), shipsToHit);
  return probabilityGrid;
}

function aiShoot(humanFleet, humanBoard) {
  var probabilityGrid = getProbabilityGrid(humanFleet, humanBoard);
  List.map((function (startingMove) {
          var x = startingMove[/* x */0];
          var y = startingMove[/* y */1];
          if (Caml_array.caml_array_get(Caml_array.caml_array_get(probabilityGrid, x), y) !== 0) {
            return Caml_array.caml_array_set(Caml_array.caml_array_get(probabilityGrid, x), y, Caml_array.caml_array_get(Caml_array.caml_array_get(probabilityGrid, x), y) + (startingMove[/* weight */2] | 0) | 0);
          } else {
            return 0;
          }
        }), startingMovesArr);
  var maxProbability = /* record */[/* contents */0];
  var target = /* record */[/* contents : tuple */[
      -1,
      -1
    ]];
  $$Array.mapi((function (x, columnArr) {
          return $$Array.mapi((function (y, param) {
                        if (Caml_array.caml_array_get(Caml_array.caml_array_get(probabilityGrid, x), y) > maxProbability[0]) {
                          target[0] = /* tuple */[
                            x,
                            y
                          ];
                          maxProbability[0] = Caml_array.caml_array_get(Caml_array.caml_array_get(probabilityGrid, x), y);
                          return /* () */0;
                        } else {
                          return 0;
                        }
                      }), columnArr);
        }), probabilityGrid);
  var match = target[0];
  var y = match[1];
  var x = match[0];
  console.log("The guess is (" + (String(x) + (", " + (String(y) + ")"))));
  updateAIVirtualBoard(humanBoard, x, y);
  return target[0];
}

var probability_weight = 1000;

var start_high_min = 20;

var start_high_max = 30;

var start_med_min = 15;

var start_med_max = 25;

var start_low_min = 10;

var start_low_max = 20;

var randomness = 0.1;

exports.probability_weight = probability_weight;
exports.start_high_min = start_high_min;
exports.start_high_max = start_high_max;
exports.start_med_min = start_med_min;
exports.start_med_max = start_med_max;
exports.start_low_min = start_low_min;
exports.start_low_max = start_low_max;
exports.randomness = randomness;
exports.getRandom = getRandom;
exports.aiVirtualBoard = aiVirtualBoard;
exports.startingMovesArr = startingMovesArr;
exports.getNumberOfHitCells = getNumberOfHitCells;
exports.updateAIVirtualBoard = updateAIVirtualBoard;
exports.getProbabilityGrid = getProbabilityGrid;
exports.aiShoot = aiShoot;
/* aiVirtualBoard Not a pure module */
