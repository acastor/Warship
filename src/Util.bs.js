// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Caml_array = require("bs-platform/lib/js/caml_array.js");
var SharedTypes$ReactHooksTemplate = require("./SharedTypes.bs.js");

function isLegalPlacement(board, x, y, direction, shipLength) {
  var validPlacement = false;
  validPlacement = direction === SharedTypes$ReactHooksTemplate.directionVertical ? (x + shipLength | 0) <= SharedTypes$ReactHooksTemplate.boardSize : (y + shipLength | 0) <= SharedTypes$ReactHooksTemplate.boardSize;
  if (validPlacement) {
    for(var index = 0 ,index_finish = shipLength - 1 | 0; index <= index_finish; ++index){
      if (validPlacement) {
        validPlacement = direction === SharedTypes$ReactHooksTemplate.directionVertical ? Caml_array.caml_array_get(Caml_array.caml_array_get(board, x + index | 0), y) !== /* Ship */1 : Caml_array.caml_array_get(Caml_array.caml_array_get(board, x), y + index | 0) !== /* Ship */1;
      }
      
    }
  }
  return validPlacement;
}

function getCoordinatesForShip(shipLength, x, y, direction) {
  var shipCoordinatesArr = Caml_array.caml_make_vect(shipLength, /* tuple */[
        -1,
        -1
      ]);
  for(var index = 0 ,index_finish = shipLength - 1 | 0; index <= index_finish; ++index){
    if (direction === SharedTypes$ReactHooksTemplate.directionVertical) {
      Caml_array.caml_array_set(shipCoordinatesArr, index, /* tuple */[
            x + index | 0,
            y
          ]);
    } else {
      Caml_array.caml_array_set(shipCoordinatesArr, index, /* tuple */[
            x,
            y + index | 0
          ]);
    }
  }
  return shipCoordinatesArr;
}

exports.isLegalPlacement = isLegalPlacement;
exports.getCoordinatesForShip = getCoordinatesForShip;
/* No side effect */
